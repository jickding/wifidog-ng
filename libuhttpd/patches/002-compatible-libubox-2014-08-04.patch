Index: libuhttpd-2.2.1/src/log.h
===================================================================
--- libuhttpd-2.2.1.orig/src/log.h
+++ libuhttpd-2.2.1/src/log.h
@@ -21,7 +21,25 @@
 #define _LOG_H
 
 #include <string.h>
-#include <libubox/ulog.h>
+#include <syslog.h>
+
+enum {
+	ULOG_KMSG   = (1 << 0),
+	ULOG_SYSLOG = (1 << 1),
+	ULOG_STDIO  = (1 << 2)
+};
+
+void ulog_open(int channels, int facility, const char *ident);
+void ulog_close(void);
+
+void ulog_threshold(int threshold);
+
+void ulog(int priority, const char *fmt, ...);
+
+#define ULOG_INFO(fmt, ...) ulog(LOG_INFO, fmt, ## __VA_ARGS__)
+#define ULOG_NOTE(fmt, ...) ulog(LOG_NOTICE, fmt, ## __VA_ARGS__)
+#define ULOG_WARN(fmt, ...) ulog(LOG_WARNING, fmt, ## __VA_ARGS__)
+#define ULOG_ERR(fmt, ...) ulog(LOG_ERR, fmt, ## __VA_ARGS__)
 
 #define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)
 
Index: libuhttpd-2.2.1/src/ulog.c
===================================================================
--- /dev/null
+++ libuhttpd-2.2.1/src/ulog.c
@@ -0,0 +1,175 @@
+/*
+ * ulog - simple logging functions
+ *
+ * Copyright (C) 2015 Jo-Philipp Wich <jow@openwrt.org>
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include "log.h"
+
+#include <stdio.h>
+#include <stdarg.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+
+static int _ulog_channels = -1;
+static int _ulog_facility = -1;
+static int _ulog_threshold = LOG_DEBUG;
+static int _ulog_initialized = 0;
+static const char *_ulog_ident = NULL;
+
+static const char *ulog_default_ident(void)
+{
+	FILE *self;
+	static char line[64];
+	char *p = NULL;
+	char *sbuf;
+
+	if ((self = fopen("/proc/self/status", "r")) != NULL) {
+		while (fgets(line, sizeof(line), self)) {
+			if (!strncmp(line, "Name:", 5)) {
+				strtok_r(line, "\t\n", &sbuf);
+				p = strtok_r(NULL, "\t\n", &sbuf);
+				break;
+			}
+		}
+		fclose(self);
+	}
+
+	return p;
+}
+
+static void ulog_defaults(void)
+{
+	char *env;
+
+	if (_ulog_initialized)
+		return;
+
+	env = getenv("PREINIT");
+
+	if (_ulog_channels < 0) {
+		if (env && !strcmp(env, "1"))
+			_ulog_channels = ULOG_KMSG;
+		else if (isatty(1))
+			_ulog_channels = ULOG_STDIO;
+		else
+			_ulog_channels = ULOG_SYSLOG;
+	}
+
+	if (_ulog_facility < 0) {
+		if (env && !strcmp(env, "1"))
+			_ulog_facility = LOG_DAEMON;
+		else if (isatty(1))
+			_ulog_facility = LOG_USER;
+		else
+			_ulog_facility = LOG_DAEMON;
+	}
+
+	if (_ulog_ident == NULL && _ulog_channels != ULOG_STDIO)
+		_ulog_ident = ulog_default_ident();
+
+	if (_ulog_channels & ULOG_SYSLOG)
+		openlog(_ulog_ident, 0, _ulog_facility);
+
+	_ulog_initialized = 1;
+}
+
+static void ulog_kmsg(int priority, const char *fmt, va_list ap)
+{
+	FILE *kmsg;
+
+	if ((kmsg = fopen("/dev/kmsg", "r+")) != NULL) {
+		fprintf(kmsg, "<%u>", priority);
+
+		if (_ulog_ident)
+			fprintf(kmsg, "%s: ", _ulog_ident);
+
+		vfprintf(kmsg, fmt, ap);
+		fclose(kmsg);
+	}
+}
+
+static void ulog_stdio(int priority, const char *fmt, va_list ap)
+{
+	FILE *out = stderr;
+
+	if (_ulog_ident)
+		fprintf(out, "%s: ", _ulog_ident);
+
+	vfprintf(out, fmt, ap);
+}
+
+static void ulog_syslog(int priority, const char *fmt, va_list ap)
+{
+	vsyslog(priority, fmt, ap);
+}
+
+void ulog_open(int channels, int facility, const char *ident)
+{
+	ulog_close();
+
+	_ulog_channels = channels;
+	_ulog_facility = facility;
+	_ulog_ident = ident;
+}
+
+void ulog_close(void)
+{
+	if (!_ulog_initialized)
+		return;
+
+	if (_ulog_channels & ULOG_SYSLOG)
+		closelog();
+
+	_ulog_initialized = 0;
+}
+
+void ulog_threshold(int threshold)
+{
+	_ulog_threshold = threshold;
+}
+
+void ulog(int priority, const char *fmt, ...)
+{
+	va_list ap;
+
+	if (priority > _ulog_threshold)
+		return;
+
+	ulog_defaults();
+
+	if (_ulog_channels & ULOG_KMSG)
+	{
+		va_start(ap, fmt);
+		ulog_kmsg(priority, fmt, ap);
+		va_end(ap);
+	}
+
+	if (_ulog_channels & ULOG_STDIO)
+	{
+		va_start(ap, fmt);
+		ulog_stdio(priority, fmt, ap);
+		va_end(ap);
+	}
+
+	if (_ulog_channels & ULOG_SYSLOG)
+	{
+		va_start(ap, fmt);
+		ulog_syslog(priority, fmt, ap);
+		va_end(ap);
+	}
+}
+
Index: libuhttpd-2.2.1/src/uhttpd.c
===================================================================
--- libuhttpd-2.2.1.orig/src/uhttpd.c
+++ libuhttpd-2.2.1/src/uhttpd.c
@@ -25,6 +25,7 @@
 #include "uhttpd.h"
 #include "uh_ssl.h"
 #include "log.h"
+#include "utils.h"
  
 static void uh_set_docroot(struct uh_server *srv, const char *docroot)
 {
Index: libuhttpd-2.2.1/src/utils.c
===================================================================
--- libuhttpd-2.2.1.orig/src/utils.c
+++ libuhttpd-2.2.1/src/utils.c
@@ -168,3 +168,15 @@ int find_idx(const char *const *list, in
             return i;
     return -1;
 }
+
+const char *usock_port(int port)
+{
+	static char buffer[sizeof("65535\0")];
+
+	if (port < 0 || port > 65535)
+		return NULL;
+
+	snprintf(buffer, sizeof(buffer), "%u", port);
+
+	return buffer;
+}
Index: libuhttpd-2.2.1/src/utils.h
===================================================================
--- libuhttpd-2.2.1.orig/src/utils.h
+++ libuhttpd-2.2.1/src/utils.h
@@ -37,4 +37,6 @@ int uh_urlencode(char *buf, int blen, co
 
 int find_idx(const char *const *list, int max, const char *str);
 
+const char *usock_port(int port);
+
 #endif
Index: libuhttpd-2.2.1/src/CMakeLists.txt
===================================================================
--- libuhttpd-2.2.1.orig/src/CMakeLists.txt
+++ libuhttpd-2.2.1/src/CMakeLists.txt
@@ -13,7 +13,7 @@ find_package(Lua51)
 include_directories(${CMAKE_CURRENT_BINARY_DIR} ${LIBUBOX_INCLUDE_DIR})
 
 set(EXTRA_LIBS ${LIBUBOX_LIBRARY} dl)
-set(SOURCE_FILES uhttpd.c client.c log.c utils.c file.c)
+set(SOURCE_FILES uhttpd.c client.c log.c utils.c file.c ulog.c)
 
 set(UHTTPD_SSL_SUPPORT_CONFIG 1)
 option(UHTTPD_SSL_SUPPORT "SSL support" ON)
Index: libuhttpd-2.2.1/CMakeLists.txt
===================================================================
--- libuhttpd-2.2.1.orig/CMakeLists.txt
+++ libuhttpd-2.2.1/CMakeLists.txt
@@ -7,4 +7,3 @@ list(APPEND CMAKE_MODULE_PATH "${CMAKE_S
 #set(CMAKE_VERBOSE_MAKEFILE ON)
 
 add_subdirectory(src)
-add_subdirectory(example)
